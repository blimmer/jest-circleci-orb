description: >
  Run jest tests, restoring jest's cache for speedier tests.

executor: << parameters.executor >>

parameters:
  executor:
    description: The executor to use
    type: executor
    default: default
  setup-steps:
    description: These steps are executed before all other steps. For example, you might log into a private NPM registry.
    type: steps
    default: []
  checkout:
    type: boolean
    default: true
    description: Boolean for whether or not to checkout as a first step. Default is true.
  package-manager:
    default: npm
    description: Select the default node package manager to use. NPM v5+ Required.
    enum:
      - npm
      - yarn
      - yarn-berry
    type: enum
  package-manager-install-command-override:
    default: ''
    description: >
      By default, packages will be installed with "npm ci", "yarn install
      --frozen-lockfile" or "yarn install --immutable".

      Optionally supply a custom package installation command, with any
      additional flags needed.
    type: string
  package-manager-cache:
    default: true
    description: Cache your node packages automatically for faster install times.
    type: boolean
  jest-cache:
    type: boolean
    default: true
    description: Boolean for whether or not to restore/save the jest cache.
  jest-cache-location:
    type: string
    default: .jest-cache
    description: The location of the jest cacheDirectory within the working directory
  jest-command-override:
    type: string
    default: ''
    description: >
      The command to use to run jest.

      When package-manager is npm -> npx --no-install jest
      When package-manager is yarn or yarn-berry -> yarn jest

      Optionally supply a custom command. For instance, if you're using a yarn monorepo, you could provide
      a `yarn workspaces foreach` command here.
  test-result-path:
    type: string
    default: ''
    description: Path (absolute, or relative to your working_directory) to directory containing JUnit XML or Cucumber JSON test metadata files, or to a single test file. See https://circleci.com/docs/configuration-reference#storetestresults
steps:
  - steps: << parameters.setup-steps >>
  - when:
      condition: << parameters.checkout >>
      steps:
        - checkout
  - node/install-packages:
      pkg-manager: << parameters.package-manager >>
      override-ci-command: << parameters.package-manager-install-command-override >>
      with-cache: << parameters.package-manager-cache >>
  - configure
  - when:
      condition: << parameters.jest-cache >>
      steps:
        - restore-cache:
            jest-cache-location: << parameters.jest-cache-location >>
  - when:
      condition:
        equal: [npm, << parameters.package-manager >>]
      steps:
        - run:
            name: Run Jest tests
            command: |
              if [[ ! -z "<< parameters.jest-command-override >>" ]]; then
                echo "Running override jest command:"
                << parameters.jest-command-override >>
              else
                npx --no-install jest
              fi
  - when:
      condition:
        or:
          - equal: [yarn, << parameters.package-manager >>]
          - equal: [yarn-berry, << parameters.package-manager >>]
      steps:
        - run:
            name: Run Jest tests
            command: |
              if [[ ! -z "<< parameters.jest-command-override >>" ]]; then
                echo "Running override jest command:"
                << parameters.jest-command-override >>
              else
                yarn jest
              fi
  - when:
      condition: << parameters.test-result-path >>
      steps:
        store_test_results:
          path: << parameters.test-result-path >>
  - when:
      condition: << parameters.jest-cache >>
      steps:
        - save-cache:
            jest-cache-location: << parameters.jest-cache-location >>
